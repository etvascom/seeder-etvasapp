Mappings:

######################################################################
# Development environment - etvas-internal integration configuration #
######################################################################
  Mode:
    CIDRBlock: # "CIDR block selection used to create the network components where the application is deployed: ex: 172.17.1.0/24"
      test: '172.17.1.0/24'
      live: '172.17.2.0/24'
    VPNGatewayId: # Id of the VPNGatewayId deployed
      test: 'vgw-034f4d60111fc4879'
      live: 'vgw-034f4d60111fc4879'
    VPNConfigBgpAsn: # "ASN allocated to the VPN"
      test: 65001
      live: 65002
    VPNConfigIpAddress: # "Public IP of the other party VPN Server"
      test: 3.65.252.154  # This is incorrect
      live: 18.159.173.14  # This is incorrect
    VPNConnfigDestinationCidrBlock: # "CIDR block of the other party network"
      test: 10.21.0.0/16
      live: 10.20.0.0/16
    NLBStaticIPs: # "Comma-delimited list of three IPs, one for each AZ/Subnet that will be used as fix IPs by NLB"
      test: "172.17.1.205,172.17.1.215,172.17.1.230"
      live: "172.17.2.205,172.17.2.215,172.17.2.230"
    AppRouteTableIds:
      test: "rtb-0f0bca3e4f5caa8ee,rtb-06ebb28253dde4538,rtb-0a29d62e46a5a8114"
      live: "rtb-0e9f090f51fc465f0,rtb-0c9970b30890d5014,rtb-05f33d40bc22abf66"


######################################################################
# PRODUCTION environment - etvas-internal integration configuration #
######################################################################
#  Mode:
#    CIDRBlock: # "CIDR block selection used to create the network components where the application is deployed: ex: 172.17.1.0/24"
#      test: '172.21.1.0/24'
#      live: '172.21.2.0/24'
#    VPNGatewayId: # Id of the VPNGatewayId deployed
#      test: 'vgw-0a7813995ce71d7f2'
#      live: 'vgw-0a7813995ce71d7f2'
#    VPNConfigBgpAsn: # "ASN allocated to the VPN"
#      test: 65101
#      live: 65102
#    VPNConfigIpAddress: # "Public IP of the other party VPN Server"
#      test: 3.65.252.154  # This is incorrect
#      live: 18.159.173.14  # This is incorrect
#    VPNConnfigDestinationCidrBlock: # "CIDR block of the other party network"
#      test: 10.21.0.0/16
#      live: 10.20.0.0/16
#    NLBStaticIPs: # "Comma-delimited list of three IPs, one for each AZ/Subnet that will be used as fix IPs by NLB"
#      test: "172.21.1.205,172.21.1.215,172.21.1.230"
#      live: "172.21.2.205,172.21.2.215,172.21.2.230"
#    AppRouteTableIds:
#      test: "rtb-0ca94b30d85079059,rtb-0bc04cc40d31d6351,rtb-056aabacd8679cb8b"
#      live: "rtb-000d05c4e2e084d56,rtb-09a815e70a51df431,rtb-0589aa2b7b1241994"


##########################################################
# PRODUCTION environment - SPB integration configuration #
##########################################################
#  Mode:
#    CIDRBlock: # "CIDR block selection used to create the network components where the application is deployed: ex: 172.17.1.0/24"
#      test: '172.21.3.0/24'
#      live: '172.21.4.0/24'
#    VPNGatewayId: # Id of the VPNGatewayId deployed
#      test: 'vgw-0a7813995ce71d7f2'
#      live: 'vgw-0a7813995ce71d7f2'
#    VPNConfigBgpAsn: # "ASN allocated to the VPN"
#      test: 65103
#      live: 65104
#    VPNConfigIpAddress: # "Public IP of the other party VPN Server"
#      test: 3.65.252.154  # This is incorrect
#      live: 18.159.173.14  # This is incorrect
#    VPNConnfigDestinationCidrBlock: # "CIDR block of the other party network"
#      test: 10.21.0.0/16
#      live: 10.20.0.0/16
#    NLBStaticIPs: # "Comma-delimited list of three IPs, one for each AZ/Subnet that will be used as fix IPs by NLB"
#      test: "172.21.3.205,172.21.3.215,172.21.3.230"
#      live: "172.21.4.205,172.21.4.215,172.21.4.230"
#    AppRouteTableIds:
#      test: "rtb-095fb7e6be3fbabdc,rtb-0188df4ac515323c6,rtb-0eb0283fb666f4302"
#      live: "rtb-085bb42605ff949bb,rtb-0aa902e5d5706da4a,rtb-0c09bea0597f7af97"


Resources:
  #################
  # Subnet resources
  #################
  InternalSubnetAZ0:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Select:
          - 0
          - Fn::Cidr:
            - Fn::Select:
              - 3
              - Fn::Cidr: [ { 'Fn::FindInMap': [ Mode, CIDRBlock, { 'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "Mode" } } ] }, 4, 6 ]
            - 4
            - 4
      VpcId:
        Fn::GetOptionSetting:
          Namespace: "aws:ec2:vpc"
          OptionName: "VPCId"
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: 'AWS::Region' }
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join: [ '/', [ 'Integration', {'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "EnvName" } }, 'InternalSubnetAZ0' ] ]
  InternalSubnetAZ0RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::GetOptionSetting:
          Namespace: "aws:ec2:vpc"
          OptionName: "VPCId"
      Tags:
        - Key: Name
          Value:
            Fn::Join: [ '/', [ 'Integration', {'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "EnvName" } }, 'InternalSubnetAZ0' ] ]
  InternalSubnetAZ0RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: InternalSubnetAZ0RouteTable
      SubnetId:
        Ref: InternalSubnetAZ0

  InternalSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Select:
          - 1
          - Fn::Cidr:
            - Fn::Select:
              - 3
              - Fn::Cidr: [ { 'Fn::FindInMap': [ Mode, CIDRBlock, { 'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "Mode" } } ] }, 4, 6 ]
            - 4
            - 4
      VpcId:
        Fn::GetOptionSetting:
          Namespace: "aws:ec2:vpc"
          OptionName: "VPCId"
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: 'AWS::Region' }
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join: [ '/', [ 'Integration', {'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "EnvName" } }, 'InternalSubnetAZ1' ] ]
  InternalSubnetAZ1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::GetOptionSetting:
          Namespace: "aws:ec2:vpc"
          OptionName: "VPCId"
      Tags:
        - Key: Name
          Value:
            Fn::Join: [ '/', [ 'Integration', {'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "EnvName" } }, 'InternalSubnetAZ0' ] ]
  InternalSubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: InternalSubnetAZ1RouteTable
      SubnetId:
        Ref: InternalSubnetAZ1

  InternalSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Select:
          - 2
          - Fn::Cidr:
            - Fn::Select:
              - 3
              - Fn::Cidr: [ { 'Fn::FindInMap': [ Mode, CIDRBlock, { 'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "Mode" } } ] }, 4, 6 ]
            - 4
            - 4
      VpcId:
        Fn::GetOptionSetting:
          Namespace: "aws:ec2:vpc"
          OptionName: "VPCId"
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: { Ref: 'AWS::Region' }
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join: [ '/', [ 'Integration', {'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "EnvName" } }, 'InternalSubnetAZ2' ] ]
  InternalSubnetAZ2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::GetOptionSetting:
          Namespace: "aws:ec2:vpc"
          OptionName: "VPCId"
      Tags:
        - Key: Name
          Value:
            Fn::Join: [ '/', [ 'Integration', {'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "EnvName" } }, 'InternalSubnetAZ0' ] ]
  InternalSubnetAZ2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: InternalSubnetAZ2RouteTable
      SubnetId:
        Ref: InternalSubnetAZ2


  #################
  # VPN connection and routing
  #################

  VPNCustomerGateway:
    Type: AWS::EC2::CustomerGateway
    Properties:
      BgpAsn: { 'Fn::FindInMap': [ Mode, VPNConfigBgpAsn, { 'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "Mode" } } ] }
      IpAddress: { 'Fn::FindInMap': [ Mode, VPNConfigIpAddress, { 'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "Mode" } } ] }
      Type: ipsec.1
      Tags:
        - Key: Name
          Value:
            Fn::Join: [ ' ', [ {'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "EnvName" } }, 'site-to-site VPN' ] ]
  VPNConnection:
    Type: AWS::EC2::VPNConnection
    Properties:
      CustomerGatewayId:
        Ref: VPNCustomerGateway
      VpnGatewayId: { 'Fn::FindInMap': [ Mode, VPNGatewayId, { 'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "Mode" } } ] }
      Type: ipsec.1
      StaticRoutesOnly: true
      Tags:
        - Key: Name
          Value:
            Fn::Join: [ ' ', [ {'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "EnvName" } }, 'site-to-site VPN' ] ]


  VPNRoutePropagation:
    Type: AWS::EC2::VPNGatewayRoutePropagation
    DependsOn: VPNConnection
    Properties:
      RouteTableIds:
        - Ref: InternalSubnetAZ0RouteTable
        - Ref: InternalSubnetAZ1RouteTable
        - Ref: InternalSubnetAZ2RouteTable
        - Fn::Select: [ 0, { 'Fn::Split': [',',  { 'Fn::FindInMap': [ Mode, AppRouteTableIds, { 'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "Mode" } } ] } ] } ]
        - Fn::Select: [ 1, { 'Fn::Split': [',',  { 'Fn::FindInMap': [ Mode, AppRouteTableIds, { 'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "Mode" } } ] } ] } ]
        - Fn::Select: [ 2, { 'Fn::Split': [',',  { 'Fn::FindInMap': [ Mode, AppRouteTableIds, { 'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "Mode" } } ] } ] } ]
      VpnGatewayId: { 'Fn::FindInMap': [ Mode, VPNGatewayId, { 'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "Mode" } } ] }

  VPNRoute:
    Type: AWS::EC2::VPNConnectionRoute
    Properties:
      DestinationCidrBlock: { 'Fn::FindInMap': [ Mode, VPNConnfigDestinationCidrBlock, { 'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "Mode" } } ] }
      VpnConnectionId:
        Ref: VPNConnection
  #################
  # Partner supporting resources
  #################

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::GetOptionSetting:
          Namespace: "aws:ec2:vpc"
          OptionName: "VPCId"
      GroupDescription: Allows traffic from site-to-site VPN to NLB and EC2
      SecurityGroupIngress:
        - Description: Allow traffic from NLB Static IPs (AZ1), used for monitoring if the instance is healthy
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Fn::Sub:
              - '${NLBStaticIP}/32'
              - NLBStaticIP:
                  Fn::Select: [0, { 'Fn::Split': [',',  { 'Fn::FindInMap': [ Mode, NLBStaticIPs, { 'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "Mode" } } ] } ] }]
        - Description: Allow traffic from NLB Static IPs (AZ2), used for monitoring if the instance is healthy
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Fn::Sub:
              - '${NLBStaticIP}/32'
              - NLBStaticIP:
                  Fn::Select: [1, { 'Fn::Split': [',',  { 'Fn::FindInMap': [ Mode, NLBStaticIPs, { 'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "Mode" } } ] } ] }]
        - Description: Allow traffic from NLB Static IPs (AZ3), used for monitoring if the instance is healthy
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Fn::Sub:
              - '${NLBStaticIP}/32'
              - NLBStaticIP:
                  Fn::Select: [2, { 'Fn::Split': [',',  { 'Fn::FindInMap': [ Mode, NLBStaticIPs, { 'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "Mode" } } ] } ] }]
        - Description: Allow traffic from SBP network, the NLB forward the traffic from port 8081 to 80, but the IP is mentained
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: { 'Fn::FindInMap': [ Mode, VPNConnfigDestinationCidrBlock, { 'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "Mode" } } ] }

  InternalNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      SubnetMappings:
        - SubnetId: { Ref: InternalSubnetAZ0}
          PrivateIPv4Address: {'Fn::Select': [0, { 'Fn::Split': [',',  { 'Fn::FindInMap': [ Mode, NLBStaticIPs, { 'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "Mode" } } ] } ] }]}
        - SubnetId: { Ref: InternalSubnetAZ1}
          PrivateIPv4Address: {'Fn::Select': [1, { 'Fn::Split': [',',  { 'Fn::FindInMap': [ Mode, NLBStaticIPs, { 'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "Mode" } } ] } ] }]}
        - SubnetId: { Ref: InternalSubnetAZ2}
          PrivateIPv4Address: {'Fn::Select': [2, { 'Fn::Split': [',',  { 'Fn::FindInMap': [ Mode, NLBStaticIPs, { 'Fn::GetOptionSetting': { Namespace: "aws:elasticbeanstalk:customoption", OptionName: "Mode" } } ] } ] }]}
      Type: network
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: true

  InternalTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: '/'
      HealthCheckPort: '80'
      HealthCheckProtocol: 'HTTP'
      Port: 80
      Protocol: TCP
      VpcId:
        Fn::GetOptionSetting:
          Namespace: "aws:ec2:vpc"
          OptionName: "VPCId"

  AWSEBV2LoadBalancerListenerInternal:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: InternalNLB
      Port: 8081
      Protocol: 'TCP'
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn:
            Ref: InternalTargetGroup

  #################
  # EB overwrite resources
  #################

  # Add to the AutoScalingGroup a TargetGroup association with the Internal NLB
  AWSEBAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      TargetGroupARNs:
        - Ref: InternalTargetGroup

  # Add a SG to the EC2 instances that will allow inbound traffic from NLB and VPN
  AWSEBAutoScalingLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      SecurityGroups:
        - Ref: AWSEBSecurityGroup
        - Ref: InstanceSecurityGroup
